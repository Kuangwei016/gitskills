/*     */ package com.iyin.sign.system.util.picUtils.doc;
/*     */ 
/*     */

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.HashMap;

/*     */
/*     */

/*     */
/*     */ public class ImgLib
/*     */ {
/*     */   private static HashMap map;
/*     */   private static String[] keys;
/*     */   private static byte[] patternSeed;
/*     */ 
/*     */   static
/*     */   {
/*     */     try
/*     */     {
/*  26 */       keys = new String['Ã¾'];
/*  27 */       map = new HashMap();
/*  28 */       int n = 0;
/*  29 */       for (int i = 1; i <= 120; i++) {
/*  30 */         keys[n] = ("t" + i);
/*  31 */         map.put(keys[n], i + ".gif");
/*  32 */         n++;
/*     */       }
/*  34 */       for (int i = 1; i <= 46; i++) {
/*  35 */         keys[n] = ("b" + i);
/*  36 */         map.put(keys[n], "b" + i + ".png");
/*  37 */         n++;
/*     */       }
/*  39 */       for (int i = 1; i <= 48; i++) {
/*  40 */         keys[n] = ("p" + i);
/*  41 */         n++;
/*     */       }
/*  43 */       for (int i = 1; i <= 40; i++) {
/*  44 */         keys[n] = ("f" + i);
/*  45 */         map.put(keys[n], "f" + i + ".gif");
/*  46 */         n++;
/*     */       }
/*     */     } catch (Throwable e) {
/*  49 */       keys = new String[0];
/*     */     }
/*     */ 
/*  52 */     patternSeed = new byte[] { -86, 85, -86, 85, -86, 85, -86, 85, 
/*  53 */       -69, -18, -69, -18, -69, -18, -69, -18, 34, -120, 34, -120, 34, 
/*  54 */       -120, 34, -120, 0, -1, -1, 0, 0, -1, -1, 0, 102, 102, 102, 102, 
/*  55 */       102, 102, 102, 102, 56, 28, 14, 7, -125, -63, -32, 112, 7, 14, 28, 
/*  56 */       56, 112, -32, -63, -125, 102, 102, -103, -103, 102, 102, -103, 
/*  57 */       -103, -103, -1, 102, -1, -103, -1, 102, -1, 0, -1, 0, 0, 0, -1, 
/*  58 */       0, 0, 68, 68, 68, 68, 68, 68, 68, 68, 17, -120, 68, 34, 17, -120, 68, 
/*  59 */       34, 34, 68, -120, 17, 34, 68, -120, 17, -120, -120, -120, -1, -120, 
/*  60 */       -120, -120, -1, 68, -86, 17, -86, 68, -86, 17, -86, 0, 34, 0, -120, 
/*  61 */       0, 34, 0, -120, 0, -128, 0, 8, 0, -128, 0, 8, 0, 0, 0, -128, 
/*  62 */       0, 0, 0, 8, 21, -86, 85, -86, 81, -86, 85, -86, -86, -35, -86, 119, -86, 
/*  63 */       -35, -86, 119, -1, -18, -1, -69, -1, -18, -1, -69, -1, -3, -1, -33, 
/*  64 */       -1, -3, -1, -33, -2, -1, -1, -1, -17, -1, -1, -1, -16, 15, 15, 15, 
/*  65 */       15, -16, -16, -16, -128, -1, -128, -128, -128, -128, -128, -128, 
/*  66 */       0, -86, 0, 32, 0, 32, 0, 32, 16, -1, 1, 1, 1, -1, 16, 16, 64, -128, 1, 
/*  67 */       3, -124, 72, 48, 32, -86, -86, -86, -86, -86, -86, -86, -86, 0, -1, 
/*  68 */       0, -1, 0, -1, 0, -1, 8, -128, -128, -128, -128, 8, 8, 8, 
/*  69 */       0, 0, 0, -16, 0, 0, 0, 15, -103, -52, 102, 51, -103, -52, 102, 51, 102, -52, 
/*  70 */       -103, 51, 102, -52, -103, 51, 17, 0, 0, 0, 0, -120, 68, 34, 
/*  71 */       0, 0, 0, 17, 34, 68, -120, 0, 0, 16, 56, 124, -2, 124, 56, 16, 68, -126, 
/*  72 */       1, -126, 68, 40, 16, 40, 0, -120, 0, 2, 0, -120, 0, 32, -40, 27, 3, 
/*  73 */       48, -79, -115, 12, -64, 16, 2, 64, 8, -128, 4, 32, 1, 72, -124, 3, 
/*  74 */       48, 72, -124, 3, 48, 32, 64, 32, 0, 4, 2, 4, 0, 24, 0, 3, -92, 24, 
/*  75 */       0, 3, -92, 12, 3, -128, 64, 64, -64, 33, 18, -126, 68, 42, 17, 
/*  76 */       -118, 68, -88, 17, 30, 85, -86, 85, -86, 30, 30, 30, 62, -35, 98, 
/*  77 */       -29, -29, -35, 38, 62 };
/*     */   }
/*  79 */   public static BufferedImage createPattern(int n) { if ((n < 0) || (n > 47))
/*  80 */       n = 0;
/*  81 */     BufferedImage img = new BufferedImage(8, 8, 1);
/*  82 */     int m = 8 * n;
/*  83 */     int black = Color.BLACK.getRGB();
/*  84 */     int white = Color.WHITE.getRGB();
/*  85 */     for (int i = 0; i < 8; i++) {
/*  86 */       int n1 = patternSeed[(m + i)];
/*  87 */       int n2 = 7;
/*  88 */       for (int n3 = 0; n3 < 8; n3++)
/*  89 */         img.setRGB(n2--, i, (n1 & 1 << n3) != 0 ? black : white);
/*     */     }
/*  91 */     return img; }
/*     */ 
/*     */   public static String[] getImgs() {
/*  94 */     return keys;
/*     */   }
/*     */   public static BufferedImage getImg(String key) {
/*  97 */     BufferedImage img = null;
/*  98 */     if (key.startsWith("p")) {
/*  99 */       img = createPattern(Integer.parseInt(key.substring(1)) - 1);
/*     */     }
/* 101 */     return img;
/*     */   }
/*     */ }

/* Location:           C:\Users\admin\Desktop\xdoc.jar
 * Qualified Name:     com.hg.doc.ImgLib
 * JD-Core Version:    0.6.0
 */